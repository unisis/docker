#!/bin/bash
### BEGIN INIT INFO
# Provides:          openerp-server
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start openerp daemon at boot time
# Description:       Enable service provided by daemon.
# X-Interactive:     true
### END INIT INFO
## more info: http://wiki.debian.org/LSBInitScripts

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin
DAEMON=/opt/odoo/openerp-server
NAME=odoo
DESC=odoo
CONFIG=/etc/odoo/openerp-server.conf
LOGFILE=/var/log/odoo/odoo.log
PIDFILE=/var/run/${NAME}.pid
USER=odoo
export LOGNAME=$USER

set -x
set -e

# NOTE: Although we could want set a number of workers related to the number of cores
# (according to http://www.slideshare.net/openobject/performance2014-35689113) this
# setting is not compatible with the auto_reload setting on openerp-server.conf file
# See https://github.com/odoo/odoo/issues/5557. I had exactly the same issue.
# So, WORKERS variable is calculated but NOT passed using the "--workers=$WORKERS" option.
# This is a bug in a Python library, maybe it will be fixed on Ubuntu 16.04.
WORKERS=$[`nproc`*2+1]

function _start() {
    # Setup Odoo
    /usr/sbin/odoo-setup

    # If this is the first execution, install the modules configured for automated install
    INIT_FLAG=/etc/odoo/initialized
    if [ -e $INIT_FLAG ]; then
        INIT_OPTION=""
    else
        MODULES=$(cat /etc/odoo/modules.conf)
        INIT_OPTION="--init=$MODULES"
        touch $INIT_FLAG
    fi

    # Load other variables configured
    source /etc/odoo/params.conf

    # Start Odoo
    start-stop-daemon --start --quiet --pidfile $PIDFILE --chuid $USER:$USER --background --make-pidfile --exec $DAEMON -- --config=$CONFIG --without-demo=all --load-language=$ODOO_LANGUAGE --language=$ODOO_LANGUAGE $INIT_OPTION
}

function _stop() {
    start-stop-daemon --stop --quiet --pidfile $PIDFILE --oknodo --retry 3
    rm -f $PIDFILE
}

function _status() {
    start-stop-daemon --status --quiet --pidfile $PIDFILE
    return $?
}


case "$1" in
    start)
        echo -n "Starting $DESC: "
        _start
        echo "ok"
    ;;

    stop)
        echo -n "Stopping $DESC: "
        _stop
        echo "ok"
    ;;
    restart|force-reload)
        echo -n "Restarting $DESC: "
        _stop
        sleep 1
        _start
        echo "ok"
    ;;
 
    status)
        echo -n "Status of $DESC: "
        _status && echo "running" || echo "stopped"
    ;;
    *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|restart|force-reload|status}" >&2
        exit 1
        ;;
esac

exit 0
